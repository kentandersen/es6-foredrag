Nettleser støtte
  vise tabell med nettleser-versjoner som er i bruk
  http://tech.finn.no/2015/06/25/browser-statistics-june-2015/


  https://kangax.github.io/compat-table/es6/
  vise tabell med masse rødt


Babel
  oversetter mellom es5 og es6
  https://babeljs.io/repl/


let
  funker nesten likt som var
    var x = true
    let y = true

    x = 1
    y = 1

    x // 1
    y // 1


  block scoped
    if (true) {
      let x = true;
    }

    x // ReferenceError: x is not defined

  kan brukes i fake scopes { ... }
    {
      let x = true;
    }

    x // ReferenceError: x is not defined


const
  block scoped
    if (true) {
      const x = true;
    }

    x // ReferenceError: x is not defined

  konstanter, kan ikke endres
    const constString = 'I am a const';
    constString = 'Cant change you?'; // SyntaxError: "constString" is read-only

  kan fortsatt endre innholdet i objekter/array
    const arr = [1, 2];
    arr[0] = 0;

    arr[0] // 0


Destructuring
  assigning array
    let arr = [1, 2, 3, 4, 5];

    let [first, second] = arr;
    first   // 1
    second  // 2

    ---

    let arr = [1, 2, 3, 4, 5]

    let [first, second,, forth] = arr;
    first   // 1
    second  // 2
    forth   // 4



  rest operator
    let arr = [1, 2, 3, 4, 5];

    let [first, second, ...rest] = arr;
    first   // 1
    second  // 2
    rest    // [3, 4, 5]

    ---

    rest operator må alltid være til slutt

    let arr = [1, 2, 3, 4, 5];
    let [first,, ...rest, fifth] // Syntax Error: Unexpected token


  spread operator
    [a, b] = [...[0, 1, 2, 3, 4, 5]];


  assigning objekter
    let obj = {a:'a', b:'b', c:'c', d:'d', e:'e'};

    let {a, b} = obj;
    a // 'a'
    b // 'b'

    ---

    assigne med renaming

    let obj = {a:'a', b:'b', c:'c', d:'d', e:'e'};
    let {a:nyttNavn, b:endaNyttNavn};

    nyttNavn      // 'a'
    endaNyttNavn  // 'b'

    ---

    opprette objekter fra variabler

    let a = 1;
    let b = 2;
    let c = 3;

    let obj = {a,b,c};

    obj // {a:1, b:2, c:3}


Modules
  export
    export const MY_CONSTANT = 7;

    export function multiply(x) {
      return x * MY_CONSTANT;
    }

    ---

    End of file export

    const MY_CONSTANT = 7;

    function multiply(x) {
      return x * MY_CONSTANT;
    }

    export { multiply, MY_CONSTANT };

    ---

    rename under export

    export { multiply as mult, MY_CONSTANT as SOME_CONSTANT };


  import

    importsti er relativ til filen den er i

    import { multiply } from 'lib/calc';

    ---

    import av flere exports

    import { multiply, MY_CONSTANT } from 'lib/calc';

    ---

    rename under import

    import { multiply as mult } from 'lib/calc';


  default export

    export default class { // anonymous class
      constructor(id, name) {
        this.id = id;
        this.name = name;
      }
    };

  default import

    legg merke til at Customer ikke er wrappet i {}

    import Customer from 'models/Customer';

    let c = new Customer(0, 'Jane');


    ---

    rename default

    import {default as Customer} from 'models/Customer';


  åpner for bedre verktøy-støtte. Feks editorer kan med sikkerhet finne ut hvor en variabel / funksjon er deklarert



Arrow functions
  inline

    siste resultat er automatisk returnert

    et param

    a => a()

    ---

    flere param

    (a,b) => a+b

    ingen param

    () => a();


  multiline

    må manuellt returnere

    et param

    a => {
      let b = a();
      return b
    }

    ---

    flere param

    (a,b) => {
      let c = a+b;
    }

    ingen param

    () => {
      let b = a();
      return let;
    }

  Context inne i en arrow function er det samme som der den blir deklarert


Map
  erstatter object i mange tilfeller
  alt kan være en key
  kan kanskje være nøstet eller ikke? vet ikke helt jeg.
  har getter / setter ikke dott notasjon

Set
  erstatter array
  unike verdier


Promise
  slik ser vanligvis callbacks ut

    noeAsync(function() {})

  Lovnad om at noe skal bli ferdig som kan returnes med en gang.
  Mest brukt i async operasjoner

    promise.then(function() {
      // alt gikk bra
    }).cache(function() {
      // noe gikk feil
    })

  fint for å kjøre async operasjoner i sekvens

    noeAsync(function() {
      noeAnnetAsync(function() {
        noeTredjeAsync(function() {
        });
      })
    })


    noeAsync()
      .then(noeAnnetAsync)
      .then(noeTredjeAsync);

  slutt med custom implentasjoner

    var moreThanHalf = new Promise(function(resolve, reject) {
      var half = Math.random();
      if(half > 0.5) {
        resolve(half);
      } else {
        reject(half);
      }
    });

  konverter jquery deferred (eller andre implementasjoner) til es6 promises

    var jsonPromise = new Promise(function(resolve, reject) {
      $.getJSON("some/endpoint").then(resolve, reject);
    });


Class
  ny syntax

    class User {
      constructor(id) {}
    }

    ---

    ny funksjonsdeklarasjon

    class User {
      constructor(id) {}

      someFunction() {
        // function body
      }
    }

    ---

    dynamiske funnskjonsnavn

    var myFunctionName = 'nameOfFunction'

    class User {
      constructor(id) {}

      someFunction() {
        // function body
      }

      [myFunctionName]() {
        // function body
      }
    }

    ---

    getter og setter metode for properties

    var myFunctionName = 'nameOfFunction'

    class User {
      constructor(id) {}

      someFunction() {
        // function body
      }

      [myFunctionName]() {
        // function body
      }

      get age() {
        return this.age
      }

      set age(age) {
        this.age = age
      }

    }



  ikke ordentlig klasser, bare syntax sukker for prototype

    class User {
      constructor(id) {}
    }

    User.prototype // alle "klasse" metodene
    var user = new User(12)


  arv fra et objekt til et annet

    class User {}
    class SuperUser extends User {}

    ---

      super metoder

      class User {
        constructor() {

        }

        someFunction() {

        }
      }
      class SuperUser extends User {
        constructor() {
          super();
        }

        someFunction() {
          super.someFunction();
        }

      }




---

Referanser
  http://es6katas.org/
  http://www.2ality.com/2013/07/es6-modules.html
  http://www.frontendjournal.com/javascript-es6-learn-important-features-in-a-few-minutes/
  http://www.html5rocks.com/en/tutorials/es6/promises/
